# This script generates the input file required by the relocation algorithm.
# Non-interactive, configure the information in lines 14-22, then run script. 
# Relocation district geometry is defined as WKT.

import sqlite3
import pandas as pd
from datetime import datetime
from datetime import timedelta
from shapely.geometry import Point
from shapely.wkt import loads
import json
import multiprocessing as mp

# Customizable Variables
THREAD_COUNT = 6    # Set how many threads are used
BATCH_SIZE = 1000   # Set size of each batch for processing
INPUT_DB_PATH = "/Users/manfredkloeppel/Projekte/IntelliJ/transport-system-simulation/example/requests_nyc_2013-05-08_1000-1030.sqlite"
INTERVAL_MINUTES = 15               # Interval for the calculation of the distribution
START_TIME = '2013-05-08 10:00:00'  # Time from which relocation data should be calculated
END_TIME = '2013-05-08 10:30:00'    # Time until which relocation data is calculated

FILENAME = "nyc_relocation_2013-05-08_15"   # Set output filename
DISTRICTS = {
    1: "MULTIPOLYGON(((-74.018118 40.712581, -74.018118 40.705337, -74.019451 40.705337, -74.019341 40.706614, -74.018403 40.710845, -74.018118 40.712581)))",
    2: "MULTIPOLYGON(((-74.019451 40.705337, -74.018118 40.705337, -74.018118 40.703307, -74.01949 40.704891, -74.019451 40.705337)))",
    3: "MULTIPOLYGON(((-74.006236 40.760746, -74.006236 40.759236, -74.007352 40.759236, -74.006236 40.760746)))",
    4: "MULTIPOLYGON(((-74.007352 40.759236, -74.006236 40.759236, -74.006236 40.758253, -74.007486 40.759054, -74.007352 40.759236)), ((-74.006236 40.75686, -74.006236 40.750253, -74.011218 40.750253, -74.010944 40.751833, -74.009067 40.751608, -74.008326 40.753891, -74.006236 40.75686)))",
    5: "MULTIPOLYGON(((-74.011218 40.750253, -74.006236 40.750253, -74.006236 40.74127, -74.011807 40.74127, -74.012207 40.74288, -74.012376 40.743562, -74.011218 40.750253)))",
    6: "MULTIPOLYGON(((-74.011807 40.74127, -74.006236 40.74127, -74.006236 40.732286, -74.011451 40.732286, -74.010944 40.737799, -74.011807 40.74127)))",
    7: "MULTIPOLYGON(((-74.011451 40.732286, -74.006236 40.732286, -74.006236 40.723303, -74.012531 40.723303, -74.01208 40.725446, -74.012014 40.726163, -74.011451 40.732286)))",
    8: "MULTIPOLYGON(((-74.012531 40.723303, -74.006236 40.723303, -74.006236 40.71432, -74.017832 40.71432, -74.017069 40.71897, -74.013513 40.718633, -74.012531 40.723303)))",
    9: "MULTIPOLYGON(((-74.017832 40.71432, -74.006236 40.71432, -74.006236 40.705337, -74.018118 40.705337, -74.018118 40.712581, -74.017832 40.71432)))",
    10: "MULTIPOLYGON(((-74.018118 40.705337, -74.006236 40.705337, -74.006236 40.703287, -74.008721 40.701774, -74.011981 40.700332, -74.014945 40.700557, -74.017415 40.702495, -74.018118 40.703307, -74.018118 40.705337)))",
    11: "MULTIPOLYGON(((-73.994354 40.773971, -73.994354 40.768219, -74.000715 40.768219, -73.996259 40.77425, -73.996125 40.77443, -73.994354 40.773971)))",
    12: "MULTIPOLYGON(((-74.000715 40.768219, -73.994354 40.768219, -73.994354 40.759236, -74.006236 40.759236, -74.006236 40.760746, -74.000715 40.768219)))",
    13: "MULTIPOLYGON(((-74.006236 40.759236, -73.994354 40.759236, -73.994354 40.750253, -74.006236 40.750253, -74.006236 40.75686, -74.00556 40.75782, -74.006236 40.758253, -74.006236 40.759236)))",
    14: "MULTIPOLYGON(((-74.006236 40.750253, -73.994354 40.750253, -73.994354 40.74127, -74.006236 40.74127, -74.006236 40.750253)))",
    15: "MULTIPOLYGON(((-74.006236 40.74127, -73.994354 40.74127, -73.994354 40.732286, -74.006236 40.732286, -74.006236 40.74127)))",
    16: "MULTIPOLYGON(((-74.006236 40.732286, -73.994354 40.732286, -73.994354 40.723303, -74.006236 40.723303, -74.006236 40.732286)))",
    17: "MULTIPOLYGON(((-74.006236 40.723303, -73.994354 40.723303, -73.994354 40.71432, -74.006236 40.71432, -74.006236 40.723303)))",
    18: "MULTIPOLYGON(((-74.006236 40.71432, -73.994354 40.71432, -73.994354 40.708722, -73.997681 40.708327, -73.998895 40.707705, -73.999435 40.707428, -74.002869 40.705337, -74.006236 40.705337, -74.006236 40.71432)))",
    19: "MULTIPOLYGON(((-74.006236 40.705337, -74.002869 40.705337, -74.006236 40.703287, -74.006236 40.705337)))",
    20: "MULTIPOLYGON(((-73.982472 40.790504, -73.982472 40.786185, -73.985531 40.786185, -73.984356 40.787886, -73.982472 40.790504)))",
    21: "MULTIPOLYGON(((-73.985531 40.786185, -73.982472 40.786185, -73.982472 40.777202, -73.991814 40.777202, -73.989395 40.780593, -73.985531 40.786185)))",
    22: "MULTIPOLYGON(((-73.991814 40.777202, -73.982472 40.777202, -73.982472 40.768219, -73.994354 40.768219, -73.994354 40.773971, -73.994248 40.773944, -73.992704 40.775955, -73.991814 40.777202)))",
    23: "MULTIPOLYGON(((-73.994354 40.768219, -73.982472 40.768219, -73.982472 40.759236, -73.994354 40.759236, -73.994354 40.768219)))",
    24: "MULTIPOLYGON(((-73.994354 40.759236, -73.982472 40.759236, -73.982472 40.750253, -73.994354 40.750253, -73.994354 40.759236)))",
    25: "MULTIPOLYGON(((-73.994354 40.750253, -73.982472 40.750253, -73.982472 40.74127, -73.994354 40.74127, -73.994354 40.750253)))",
    26: "MULTIPOLYGON(((-73.994354 40.74127, -73.982472 40.74127, -73.982472 40.732286, -73.994354 40.732286, -73.994354 40.74127)))",
    27: "MULTIPOLYGON(((-73.994354 40.732286, -73.982472 40.732286, -73.982472 40.723303, -73.994354 40.723303, -73.994354 40.732286)))",
    28: "MULTIPOLYGON(((-73.994354 40.723303, -73.982472 40.723303, -73.982472 40.71432, -73.994354 40.71432, -73.994354 40.723303)))",
    29: "MULTIPOLYGON(((-73.994354 40.71432, -73.982472 40.71432, -73.982472 40.710132, -73.994354 40.708722, -73.994354 40.71432)))",
    30: "MULTIPOLYGON(((-73.97059 40.807096, -73.97059 40.804152, -73.972635 40.804152, -73.972526 40.804303, -73.971429 40.805885, -73.97059 40.807096)))",
    31: "MULTIPOLYGON(((-73.972635 40.804152, -73.97059 40.804152, -73.97059 40.795168, -73.979114 40.795168, -73.978083 40.7966, -73.972635 40.804152)))",
    32: "MULTIPOLYGON(((-73.979114 40.795168, -73.97059 40.795168, -73.97059 40.786185, -73.982472 40.786185, -73.982472 40.790504, -73.979114 40.795168)))",
    33: "MULTIPOLYGON(((-73.982472 40.786185, -73.97059 40.786185, -73.97059 40.783624, -73.970739 40.78342, -73.970791 40.78335, -73.970824 40.783304, -73.971257 40.782717, -73.971649 40.782148, -73.971734 40.782037, -73.971821 40.781917, -73.972442 40.781052, -73.972685 40.780713, -73.973094 40.780144, -73.973571 40.779478, -73.974067 40.778805, -73.974532 40.778168, -73.974997 40.777533, -73.975239 40.777202, -73.982472 40.777202, -73.982472 40.786185)))",
    34: "MULTIPOLYGON(((-73.982472 40.777202, -73.975239 40.777202, -73.975461 40.776899, -73.975893 40.776307, -73.975959 40.776217, -73.976458 40.775533, -73.976907 40.774916, -73.977327 40.774339, -73.97737 40.774281, -73.977827 40.773656, -73.978229 40.773098, -73.978281 40.773031, -73.978328 40.772967, -73.978668 40.772499, -73.978698 40.772458, -73.978728 40.772417, -73.978773 40.772355, -73.979193 40.771782, -73.979652 40.771156, -73.979928 40.77078, -73.980112 40.770529, -73.980345 40.770219, -73.980576 40.769911, -73.981029 40.769275, -73.981523 40.768582, -73.981549 40.768537, -73.98156 40.768482, -73.981552 40.768428, -73.98154 40.768391, -73.981522 40.768345, -73.981507 40.768313, -73.981495 40.768275, -73.981493 40.768258, -73.981465 40.768224, -73.981462 40.768219, -73.982472 40.768219, -73.982472 40.777202)))",
    35: "MULTIPOLYGON(((-73.982472 40.768219, -73.981462 40.768219, -73.981442 40.768188, -73.981425 40.76815, -73.981413 40.768111, -73.981407 40.768071, -73.981407 40.768031, -73.981411 40.767994, -73.981421 40.767958, -73.981436 40.767922, -73.981459 40.767883, -73.981479 40.767854, -73.981508 40.767823, -73.981541 40.767793, -73.981578 40.767767, -73.981619 40.767744, -73.981551 40.767746, -73.98151 40.767748, -73.981488 40.767749, -73.981424 40.767753, -73.98136 40.767751, -73.981318 40.76775, -73.981287 40.767742, -73.981222 40.767738, -73.981134 40.767724, -73.981018 40.767699, -73.979602 40.767098, -73.979451 40.767034, -73.979183 40.766921, -73.979076 40.766876, -73.978984 40.766837, -73.977662 40.766281, -73.977097 40.766043, -73.976787 40.76591, -73.976719 40.765882, -73.976421 40.765755, -73.976221 40.765671, -73.973766 40.764636, -73.973625 40.764577, -73.973517 40.764534, -73.973128 40.764372, -73.973015 40.764279, -73.972954 40.764365, -73.972806 40.764559, -73.972604 40.76483, -73.972553 40.764898, -73.972486 40.764989, -73.972459 40.765027, -73.972099 40.765518, -73.971648 40.766143, -73.971189 40.766767, -73.970728 40.767394, -73.97059 40.767589, -73.97059 40.759236, -73.982472 40.759236, -73.982472 40.768219)))",
    36: "MULTIPOLYGON(((-73.982472 40.759236, -73.97059 40.759236, -73.97059 40.750253, -73.982472 40.750253, -73.982472 40.759236)))",
    37: "MULTIPOLYGON(((-73.982472 40.750253, -73.97059 40.750253, -73.97059 40.744167, -73.971526 40.742954, -73.971883 40.74127, -73.982472 40.74127, -73.982472 40.750253)))",
    38: "MULTIPOLYGON(((-73.982472 40.74127, -73.971883 40.74127, -73.972217 40.739698, -73.97402 40.736011, -73.973201 40.732286, -73.982472 40.732286, -73.982472 40.74127)))",
    39: "MULTIPOLYGON(((-73.982472 40.732286, -73.973201 40.732286, -73.973008 40.731408, -73.971081 40.729592, -73.971652 40.726532, -73.972118 40.724033, -73.97234 40.723303, -73.982472 40.723303, -73.982472 40.732286)))",
    40: "MULTIPOLYGON(((-73.982472 40.723303, -73.97234 40.723303, -73.975008 40.714524, -73.975146 40.71432, -73.982472 40.71432, -73.982472 40.723303)))",
    41: "MULTIPOLYGON(((-73.982472 40.71432, -73.975146 40.71432, -73.977083 40.711454, -73.97938 40.710499, -73.982472 40.710132, -73.982472 40.71432)))",
    42: "MULTIPOLYGON(((-73.958707 40.825404, -73.958707 40.822909, -73.959917 40.823724, -73.958707 40.825404)), ((-73.958707 40.822272, -73.958707 40.822118, -73.958855 40.822118, -73.958707 40.822272)))",
    43: "MULTIPOLYGON(((-73.958855 40.822118, -73.958707 40.822118, -73.958707 40.813135, -73.966405 40.813135, -73.966191 40.813444, -73.963832 40.816921, -73.958855 40.822118)))",
    44: "MULTIPOLYGON(((-73.966405 40.813135, -73.958707 40.813135, -73.958707 40.804152, -73.97059 40.804152, -73.97059 40.807096, -73.966405 40.813135)))",
    45: "MULTIPOLYGON(((-73.97059 40.804152, -73.958707 40.804152, -73.958707 40.799883, -73.959086 40.799357, -73.959125 40.799304, -73.959548 40.798725, -73.960043 40.798049, -73.960424 40.797529, -73.960536 40.797376, -73.960996 40.796746, -73.961456 40.796118, -73.961492 40.796069, -73.961917 40.795488, -73.962151 40.795168, -73.97059 40.795168, -73.97059 40.804152)))",
    46: "MULTIPOLYGON(((-73.97059 40.795168, -73.962151 40.795168, -73.962376 40.79486, -73.962803 40.794277, -73.962863 40.794194, -73.962912 40.794128, -73.96372 40.793023, -73.964187 40.792385, -73.964707 40.791674, -73.964765 40.791595, -73.965206 40.79099, -73.965665 40.790361, -73.966118 40.78974, -73.966202 40.789624, -73.966284 40.789512, -73.966578 40.789109, -73.967036 40.788481, -73.96725 40.788187, -73.96748 40.787873, -73.967949 40.78723, -73.968405 40.786604, -73.968711 40.786185, -73.97059 40.786185, -73.97059 40.795168)))",
    47: "MULTIPOLYGON(((-73.97059 40.786185, -73.968711 40.786185, -73.968864 40.785976, -73.969231 40.785472, -73.969353 40.785305, -73.969482 40.785128, -73.969859 40.784611, -73.970329 40.783979, -73.97059 40.783624, -73.97059 40.786185)), ((-73.958707 40.783879, -73.958707 40.777202, -73.963601 40.777202, -73.963476 40.777373, -73.963293 40.777622, -73.963269 40.777655, -73.963247 40.777684, -73.9632 40.777748, -73.962816 40.778272, -73.962782 40.778319, -73.962743 40.778371, -73.962354 40.7789, -73.962316 40.778953, -73.962278 40.779004, -73.961887 40.779536, -73.961849 40.779588, -73.961812 40.779639, -73.961427 40.780163, -73.961381 40.780226, -73.961326 40.780301, -73.960959 40.780802, -73.960919 40.780856, -73.96075 40.781091, -73.960735 40.781106, -73.960414 40.781545, -73.959922 40.782213, -73.959507 40.782781, -73.95947 40.782833, -73.959419 40.782903, -73.959043 40.783419, -73.959007 40.783468, -73.958971 40.783518, -73.958707 40.783879)))",
    48: "MULTIPOLYGON(((-73.963601 40.777202, -73.958707 40.777202, -73.958707 40.768219, -73.970139 40.768219, -73.969871 40.768583, -73.969825 40.768646, -73.969778 40.76871, -73.969365 40.769271, -73.968904 40.769901, -73.968441 40.770517, -73.968394 40.770584, -73.967994 40.771147, -73.967534 40.771776, -73.967101 40.772375, -73.967039 40.772461, -73.966969 40.772557, -73.966545 40.773143, -73.966085 40.773778, -73.965625 40.774413, -73.965162 40.775051, -73.965059 40.775193, -73.964931 40.77537, -73.964703 40.775684, -73.964245 40.776317, -73.96391 40.776778, -73.963831 40.776888, -73.963749 40.777, -73.963667 40.777113, -73.963601 40.777202)))",
    49: "MULTIPOLYGON(((-73.970139 40.768219, -73.958707 40.768219, -73.958707 40.759236, -73.97059 40.759236, -73.97059 40.767589, -73.970326 40.767961, -73.970281 40.768025, -73.970232 40.768092, -73.970139 40.768219)))",
    50: "MULTIPOLYGON(((-73.97059 40.759236, -73.958707 40.759236, -73.958707 40.757648, -73.960066 40.755846, -73.961893 40.754574, -73.96583 40.750253, -73.97059 40.750253, -73.97059 40.759236)))",
    51: "MULTIPOLYGON(((-73.97059 40.750253, -73.96583 40.750253, -73.96624 40.749803, -73.97059 40.744167, -73.97059 40.750253)))",
    52: "MULTIPOLYGON(((-73.946825 40.850869, -73.946825 40.849067, -73.947298 40.849067, -73.947346 40.849222, -73.947087 40.850669, -73.946825 40.850869)))",
    53: "MULTIPOLYGON(((-73.947298 40.849067, -73.946825 40.849067, -73.946825 40.846035, -73.946852 40.846111, -73.946963 40.847979, -73.947298 40.849067)), ((-73.946825 40.843101, -73.946825 40.840084, -73.948442 40.840084, -73.946825 40.843101)))",
    54: "MULTIPOLYGON(((-73.948442 40.840084, -73.946825 40.840084, -73.946825 40.831101, -73.952507 40.831101, -73.951644 40.832414, -73.950373 40.834663, -73.950298 40.834797, -73.948927 40.839179, -73.948442 40.840084)))",
    55: "MULTIPOLYGON(((-73.952507 40.831101, -73.946825 40.831101, -73.946825 40.822118, -73.958707 40.822118, -73.958707 40.822272, -73.958337 40.822659, -73.958707 40.822909, -73.958707 40.825404, -73.956707 40.828182, -73.95499 40.827686, -73.953916 40.828957, -73.952507 40.831101)))",
    56: "MULTIPOLYGON(((-73.958707 40.822118, -73.946825 40.822118, -73.946825 40.813135, -73.958707 40.813135, -73.958707 40.822118)))",
    57: "MULTIPOLYGON(((-73.958707 40.813135, -73.946825 40.813135, -73.946825 40.804152, -73.958707 40.804152, -73.958707 40.813135)))",
    58: "MULTIPOLYGON(((-73.958707 40.804152, -73.946825 40.804152, -73.946825 40.795168, -73.950464 40.795168, -73.950158 40.795588, -73.949695 40.796217, -73.949426 40.796597, -73.949505 40.796634, -73.949565 40.79668, -73.949607 40.79673, -73.949631 40.796776, -73.949637 40.796799, -73.949646 40.796834, -73.949646 40.796891, -73.949633 40.796943, -73.949637 40.796986, -73.949737 40.797097, -73.950917 40.797589, -73.952318 40.798181, -73.952394 40.79821, -73.95253 40.798271, -73.952621 40.798311, -73.955208 40.799405, -73.955388 40.799481, -73.955907 40.799698, -73.957868 40.800521, -73.957885 40.800487, -73.957908 40.800455, -73.957937 40.800426, -73.957972 40.8004, -73.958011 40.800379, -73.958054 40.800362, -73.958095 40.800351, -73.958137 40.800345, -73.95818 40.800342, -73.958264 40.80035, -73.958303 40.800359, -73.95834 40.800373, -73.958388 40.800309, -73.958632 40.799988, -73.958707 40.799883, -73.958707 40.804152)))",
    59: "MULTIPOLYGON(((-73.950464 40.795168, -73.946825 40.795168, -73.946825 40.786185, -73.957026 40.786185, -73.956722 40.786603, -73.956268 40.787225, -73.955874 40.787765, -73.955769 40.78791, -73.955277 40.788585, -73.95512 40.788794, -73.954817 40.789205, -73.954347 40.789842, -73.953889 40.790471, -73.953438 40.791085, -73.952984 40.791722, -73.952554 40.792303, -73.952522 40.792347, -73.95248 40.792406, -73.952073 40.792967, -73.951637 40.79356, -73.951602 40.793608, -73.951111 40.794285, -73.950613 40.794965, -73.950464 40.795168)))",
    60: "MULTIPOLYGON(((-73.957026 40.786185, -73.946825 40.786185, -73.946825 40.777202, -73.958707 40.777202, -73.958707 40.783879, -73.958601 40.784025, -73.95855 40.784095, -73.958492 40.784174, -73.958122 40.784683, -73.958096 40.784718, -73.958051 40.784779, -73.957639 40.785345, -73.957172 40.785985, -73.957026 40.786185)))",
    61: "MULTIPOLYGON(((-73.958707 40.777202, -73.946825 40.777202, -73.946825 40.770372, -73.948739 40.768219, -73.958707 40.768219, -73.958707 40.777202)))",
    62: "MULTIPOLYGON(((-73.958707 40.768219, -73.948739 40.768219, -73.952088 40.764451, -73.957472 40.759288, -73.957511 40.759236, -73.958707 40.759236, -73.958707 40.768219)))",
    63: "MULTIPOLYGON(((-73.958707 40.759236, -73.957511 40.759236, -73.958345 40.758129, -73.958707 40.757648, -73.958707 40.759236)))",
    64: "MULTIPOLYGON(((-73.934943 40.864391, -73.934943 40.858051, -73.939337 40.858051, -73.935516 40.863335, -73.934943 40.864391)))",
    65: "MULTIPOLYGON(((-73.939337 40.858051, -73.934943 40.858051, -73.934943 40.849067, -73.946825 40.849067, -73.946825 40.850869, -73.946111 40.851417, -73.944197 40.852164, -73.942715 40.853247, -73.939467 40.857871, -73.939337 40.858051)))",
    66: "MULTIPOLYGON(((-73.946825 40.849067, -73.934943 40.849067, -73.934943 40.840084, -73.946825 40.840084, -73.946825 40.843101, -73.946519 40.843673, -73.946395 40.844803, -73.946825 40.846035, -73.946825 40.849067)))",
    67: "MULTIPOLYGON(((-73.946825 40.840084, -73.934943 40.840084, -73.934943 40.831101, -73.946825 40.831101, -73.946825 40.840084)))",
    68: "MULTIPOLYGON(((-73.946825 40.831101, -73.934943 40.831101, -73.934943 40.822118, -73.946825 40.822118, -73.946825 40.831101), (-73.940224 40.830292, -73.940158 40.830381, -73.940346 40.830458, -73.940224 40.830292)))",
    69: "MULTIPOLYGON(((-73.946825 40.822118, -73.934943 40.822118, -73.934943 40.813135, -73.946825 40.813135, -73.946825 40.822118), (-73.936231 40.81466, -73.936108 40.814767, -73.935773 40.815245, -73.935758 40.815323, -73.935859 40.81527, -73.936057 40.814992, -73.936157 40.814853, -73.936197 40.814796, -73.936231 40.81466)))",
    70: "MULTIPOLYGON(((-73.946825 40.813135, -73.934943 40.813135, -73.934943 40.804152, -73.946825 40.804152, -73.946825 40.813135)))",
    71: "MULTIPOLYGON(((-73.946825 40.804152, -73.934943 40.804152, -73.934943 40.795168, -73.946825 40.795168, -73.946825 40.804152)))",
    72: "MULTIPOLYGON(((-73.946825 40.795168, -73.934943 40.795168, -73.934943 40.791354, -73.936059 40.790467, -73.937516 40.787662, -73.938619 40.786185, -73.946825 40.786185, -73.946825 40.795168)))",
    73: "MULTIPOLYGON(((-73.946825 40.786185, -73.938619 40.786185, -73.93922 40.785381, -73.941394 40.784184, -73.943098 40.783118, -73.943184 40.782596, -73.94332 40.781771, -73.941888 40.777451, -73.941832 40.777202, -73.946825 40.777202, -73.946825 40.786185)))",
    74: "MULTIPOLYGON(((-73.946825 40.777202, -73.941832 40.777202, -73.941591 40.776142, -73.942406 40.774926, -73.946185 40.771092, -73.946825 40.770372, -73.946825 40.777202)))",
    75: "MULTIPOLYGON(((-73.923061 40.87759, -73.923061 40.876017, -73.92917 40.876017, -73.927662 40.877846, -73.923562 40.878033, -73.923061 40.87759)))",
    76: "MULTIPOLYGON(((-73.92917 40.876017, -73.923061 40.876017, -73.923061 40.867034, -73.93351 40.867034, -73.933095 40.867799, -73.932749 40.870376, -73.930033 40.87497, -73.92917 40.876017)))",
    77: "MULTIPOLYGON(((-73.93351 40.867034, -73.923061 40.867034, -73.923061 40.858051, -73.934943 40.858051, -73.934943 40.864391, -73.93351 40.867034)))",
    78: "MULTIPOLYGON(((-73.934943 40.858051, -73.923061 40.858051, -73.923061 40.854425, -73.92497 40.85179, -73.926806 40.849067, -73.934943 40.849067, -73.934943 40.858051)))",
    79: "MULTIPOLYGON(((-73.934943 40.849067, -73.926806 40.849067, -73.927464 40.848091, -73.929613 40.84499, -73.930527 40.842822, -73.932038 40.840084, -73.934943 40.840084, -73.934943 40.849067)))",
    80: "MULTIPOLYGON(((-73.934943 40.840084, -73.932038 40.840084, -73.933342 40.837721, -73.934272 40.835903, -73.934824 40.834825, -73.934849 40.83348, -73.934648 40.831101, -73.934943 40.831101, -73.934943 40.840084)))",
    81: "MULTIPOLYGON(((-73.934943 40.831101, -73.934648 40.831101, -73.934058 40.824117, -73.933831 40.822118, -73.934943 40.822118, -73.934943 40.831101)))",
    82: "MULTIPOLYGON(((-73.934943 40.822118, -73.933831 40.822118, -73.933639 40.820435, -73.933682 40.818284, -73.933787 40.813145, -73.933788 40.813135, -73.934943 40.813135, -73.934943 40.822118)))",
    83: "MULTIPOLYGON(((-73.934943 40.813135, -73.933788 40.813135, -73.934133 40.810117, -73.93396 40.808752, -73.932725 40.806883, -73.930326 40.804152, -73.934943 40.804152, -73.934943 40.813135)))",
    84: "MULTIPOLYGON(((-73.934943 40.804152, -73.930326 40.804152, -73.929736 40.80348, -73.928724 40.801592, -73.928501 40.798769, -73.928699 40.796263, -73.929281 40.795168, -73.934943 40.795168, -73.934943 40.804152)))",
    85: "MULTIPOLYGON(((-73.934943 40.795168, -73.929281 40.795168, -73.929514 40.79473, -73.933589 40.79243, -73.934943 40.791354, -73.934943 40.795168)))",
    86: "MULTIPOLYGON(((-73.921283 40.876017, -73.923061 40.876017, -73.923061 40.87759, -73.921283 40.876017)))",
    87: "MULTIPOLYGON(((-73.923061 40.876017, -73.921283 40.876017, -73.92124 40.875979, -73.918128 40.874821, -73.915955 40.87497, -73.911558 40.8737, -73.911179 40.873366, -73.911179 40.86816, -73.911871 40.867034, -73.923061 40.867034, -73.923061 40.876017)))",
    88: "MULTIPOLYGON(((-73.923061 40.867034, -73.911871 40.867034, -73.91225 40.866417, -73.914572 40.86369, -73.917733 40.86029, -73.919861 40.858051, -73.923061 40.858051, -73.923061 40.867034)))",
    89: "MULTIPOLYGON(((-73.923061 40.858051, -73.919861 40.858051, -73.922277 40.855508, -73.923061 40.854425, -73.923061 40.858051)))",
    90: "MULTIPOLYGON(((-73.911179 40.86816, -73.911179 40.873366, -73.910076 40.872393, -73.910323 40.869554, -73.911179 40.86816)))"
}

# Global Data (Do not modify)
OUTPUT_JSON_DICT = {}
DISTRICT_DATA = {}
INPUT_DATA = pd.DataFrame


def assign_district_to_entry(data):
    work_data = data.copy()
    start_timer = datetime.now()

    # determine relative share of demand in each district
    for district_id, district_geom_wkt in DISTRICTS.items():
        district_poly = loads(district_geom_wkt)
        work_data.loc[work_data.apply(lambda x: district_poly.contains(x['point_obj']), axis=1), 'district_id'] = district_id

    print("{} {}: Processing duration for batch: {} sec".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), mp.current_process(), round((datetime.now()-start_timer).total_seconds())))
    return work_data


def process_district(district):
    start_timer = datetime.now()

    # determine relative share of demand in each district
    district_id = district[0]
    district_geom_wkt = district[1]

    district_dict = {}
    district_geom_dict = {'geom': district_geom_wkt}
    district_time_dict = {}
    district_time_dict_abs = {}

    # Select Data from district
    district_area_data = INPUT_DATA.loc[INPUT_DATA['district_id'] == district_id]

    # Get total demand data
    total_demand_data = OUTPUT_JSON_DICT.get('total_absolute_demand')

    # Set start/end time for data generation
    start_time = datetime.strptime(START_TIME, '%Y-%m-%d %H:%M:%S')
    end_time = datetime.strptime(END_TIME, '%Y-%m-%d %H:%M:%S')

    loop_time = start_time
    while loop_time < end_time:
        current_requests_in_district = district_area_data.loc[
            (district_area_data['o_time'] >= loop_time) & (
                    district_area_data['o_time'] < loop_time + timedelta(minutes=INTERVAL_MINUTES))].shape[0]

        total_current_requests = total_demand_data.get(loop_time.strftime('%Y-%m-%d %H:%M'))

        # Add dict entry with current timestamp and percentage of total demand at this time
        if current_requests_in_district > 0:
            district_time_dict.update(
                {loop_time.strftime(
                    '%Y-%m-%dT%H:%M'): current_requests_in_district / total_current_requests})
            district_time_dict_abs.update(
                {loop_time.strftime('%Y-%m-%dT%H:%M'): current_requests_in_district})
        else:
            district_time_dict.update(
                {loop_time.strftime('%Y-%m-%dT%H:%M'): 0.0})  # important to have double value
            district_time_dict_abs.update({loop_time.strftime('%Y-%m-%dT%H:%M'): 0})

        loop_time = loop_time + timedelta(minutes=INTERVAL_MINUTES)

    district_dict.update(district_geom_dict)
    district_dict.update({'time_data': district_time_dict})
    district_dict.update({'time_data_abs': district_time_dict_abs})

    print("{} {}: Processed District {} ({} sec)".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), mp.current_process(), district_id, round((datetime.now()-start_timer).total_seconds())))
    return {"{}".format(district_id): district_dict}


# input - df: a Dataframe, chunkSize: the chunk size
# output - a list of DataFrame
# purpose - splits the DataFrame into smaller of max size chunkSize (last is smaller)
# Source: https://stackoverflow.com/questions/17315737/split-a-large-pandas-dataframe
def split_dataframe(df, chunk_size=100000):
    df_list = list()
    chunk_number = len(df) // chunk_size + 1
    for i in range(chunk_number):
        df_list.append(df[i*chunk_size:(i+1)*chunk_size])
    return df_list


def load_data():
    global INPUT_DATA

    # Connect to database
    conn = sqlite3.connect(INPUT_DB_PATH)

    # Enable spatialite extension
    conn.enable_load_extension(True)
    conn.execute("SELECT load_extension('/Users/manfredkloeppel/Projekte/Diss_Final/TSS Code/spatialite-bin-master/lib/mac/x64/mod_spatialite.dylib')")

    # Set start/end time for data generation
    start_time = datetime.strptime(START_TIME, '%Y-%m-%d %H:%M:%S')
    end_time = datetime.strptime(END_TIME, '%Y-%m-%d %H:%M:%S')

    # Load data from DB
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Loading data from DB...")
    query = 'SELECT o_time, o_lat, o_lon FROM requests WHERE STRFTIME(o_time) >= STRFTIME(\'{starttime}\') AND ' \
            'STRFTIME(o_time) < STRFTIME(\'{endtime}\')'.format(starttime=start_time, endtime=end_time)
    INPUT_DATA = pd.read_sql_query(query, conn)
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Data loaded from DB")

    # Convert time columns to datetime & create point objects for all requests
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Calculating points...")
    INPUT_DATA['o_time'] = pd.to_datetime(INPUT_DATA['o_time'])
    INPUT_DATA['point_obj'] = INPUT_DATA.apply(lambda x: Point(x['o_lon'], x['o_lat']), axis=1)

    # Create empty column to store district-id
    INPUT_DATA['district_id'] = None


def calc_total_absolute_demand():
    global INPUT_DATA
    # Set start/end time for data generation
    start_time = datetime.strptime(START_TIME, '%Y-%m-%d %H:%M:%S')
    end_time = datetime.strptime(END_TIME, '%Y-%m-%d %H:%M:%S')

    # store overall absolute demand in json
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Calculating overall demand...")
    loop_time = start_time
    total_demand_dict = {}
    while loop_time < end_time:
        total_current_requests = INPUT_DATA.loc[(INPUT_DATA['o_time'] >= loop_time) & (
                INPUT_DATA['o_time'] < loop_time + timedelta(minutes=INTERVAL_MINUTES))].shape[0]

        total_demand_dict.update({loop_time.strftime('%Y-%m-%d %H:%M'): total_current_requests})
        loop_time = loop_time + timedelta(minutes=INTERVAL_MINUTES)

    OUTPUT_JSON_DICT.update({'total_absolute_demand': total_demand_dict})


def save_data_as_csv():
    with open(FILENAME + '.csv', 'w', newline='') as out_f:
        print("district_id;time;req_cnt;geom", file=out_f)
        for d_id, d_data in DISTRICT_DATA.items():
            geom_wkt = d_data.get('geom')
            for time_slot, req_cnt in d_data.get('time_data_abs').items():
                print(
                    "{};{};{};{}".format(d_id, time_slot, req_cnt, geom_wkt),
                    file=out_f)


def main():
    global INPUT_DATA

    load_data()
    calc_total_absolute_demand()

    # Split the data for parallel processing
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Splitting dataset ({} lines) into batches with {} lines...".format(len(INPUT_DATA), BATCH_SIZE))
    data_split_df = split_dataframe(INPUT_DATA, BATCH_SIZE)

    # Assign all requests to a district based on their location and merge the results
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Processing {} batches to determine district-ids for each request...".format(len(data_split_df)))
    pool = mp.Pool(THREAD_COUNT)
    result = pool.map(assign_district_to_entry, data_split_df)
    INPUT_DATA = pd.concat(result)
    pool.close()
    pool.join()

    # Determine share of requests in a district and merge results of each district
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Calculating district-shares...")
    pool = mp.Pool(THREAD_COUNT)
    result = pool.map(process_district, DISTRICTS.items())
    for entry in result:
        DISTRICT_DATA.update(entry)
    pool.close()
    pool.join()

    # Save data to JSON-File
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Saving data...")
    OUTPUT_JSON_DICT.update({"data": DISTRICT_DATA})
    with open(FILENAME + '.json', 'w') as json_file:
        json.dump(OUTPUT_JSON_DICT, json_file, indent=4, sort_keys=True, default=str)

    save_data_as_csv()
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S") + " Finished.")


main()
